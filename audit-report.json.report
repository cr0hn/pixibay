{
    "version": "2.1.0",
    "$schema": "http://json.schemastore.org/sarif-2.1.0.json",
    "runs": [
        {
            "tool": {
                "driver": {
                    "name": "42Crunch REST API Static Security Testing",
                    "version": "1.0.0",
                    "informationUri": "https://42crunch.com/",
                    "rules": [
                        {
                            "id": "v3-global-securityscheme-apikey-inheader",
                            "shortDescription": {
                                "text": "Transporting API keys in a header over network allowed"
                            },
                            "helpUri": "https://docs.42crunch.com/latest/content/oasv3/datavalidation/schema/v3-global-securityscheme-apikey-inheader.htm",
                            "help": {
                                "text": "Description"
                            },
                            "properties": {
                                "category": "Other",
                                "security-severity": "2"
                            }
                        },
                        {
                            "id": "v3-operation-securityrequirement-apikey-inheader",
                            "shortDescription": {
                                "text": "Operation accepts API keys transported in a header over network"
                            },
                            "helpUri": "https://docs.42crunch.com/latest/content/oasv3/datavalidation/schema/v3-operation-securityrequirement-apikey-inheader.htm",
                            "help": {
                                "text": "Description"
                            },
                            "properties": {
                                "category": "Other",
                                "security-severity": "6"
                            }
                        }
                    ]
                }
            },
            "results": [
                {
                    "level": "note",
                    "ruleId": "v3-global-securityscheme-apikey-inheader",
                    "message": {
                        "text": "# Transporting API keys in a header over network allowed\n======================================================\n\n\n\n## Description\n\n\nDescription\n-----------\n\n\nOne or more global security schemes in your API allows transporting API keys in a header over the network. The credentials are sent over the network on each API call, over and over again, and are exposed to attack attempts to retrieve them. \n\n\nThis is a potential risk, because the definition is in security schemes. However, it easily turns into an actual risk when the unsafe method is used in a security requirement.\n\n\nFor more details, see the [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#security-scheme-object).\n\n\n\n\n## Example\n\n\nExample\n-------\n\n\nThe following is an example of how this type of risk could look in your API definition:\n\n\n\n\n```yaml\ncomponents:\n    securitySchemes:\n        apiKey:\n            in: header\n            name: X-API-Key\n            type: apiKey\nservers:\n-   description: API server\n    url: https://my.api.server.com/\n\n```\n\n\n```json\n{  \n    \"servers\": [\n        {\n            \"url\": \"https://my.api.server.com/\",\n            \"description\": \"API server\"\n        }\n    ],\n    // ...  \n    \"components\": {\n        \"securitySchemes\": {\n            \"apiKey\": {\n                \"type\": \"apiKey\",\n                \"name\": \"X-API-Key\",\n                \"in\": \"header\"\n            }\n        }\n    }\n}\n```\n\n\n## Remediation\n\n\nRemediation\n-----------\n\n\nUse a more secure authentication method, like OAuth 2.0. It uses access tokens with limited lifetime and authorizations (the scopes) granted that the resource owner grants from an authorization server.\n\n\nAn API operation can be consumed only if the request includes an access token and the scopes of the token match the scopes that the API operation requires. Even if attackers successfully retrieved access tokens, they can only use the token on a subset of the API operation and for a limited time.\n\n\n\n\n```yaml\ncomponents:\n    securitySchemes:\n        OAuth2:\n            flows:\n                authorizationCode:\n                    authorizationUrl: https://example.com/oauth/authorize\n                    scopes:\n                        read: read objects in your account\n                        write: modify objects in your account\n                    tokenUrl: https://example.com/oauth/token\n            type: oauth2\nsecurity:\n-   OAuth2:\n    - write\n    - read\nservers:\n-   description: API server\n    url: https://my.api.server.com/\n\n```\n\n\n```json\n{  \n    \"servers\": [\n        {\n            \"url\": \"https://my.api.server.com/\",\n            \"description\": \"API server\"\n        }\n    ],\n    // ...  \n    \"components\": {\n        \"securitySchemes\": {\n            \"OAuth2\": {\n                \"type\": \"oauth2\",\n                \"flows\": {\n                    \"authorizationCode\": {\n                        \"scopes\": {\n                            \"write\": \"modify objects in your account\",\n                            \"read\": \"read objects in your account\"\n                        },\n                        \"authorizationUrl\": \"https://example.com/oauth/authorize\",\n                        \"tokenUrl\": \"https://example.com/oauth/token\" \n                    }\n                }\n            }\n        }\n    },\n    // ...\n    \"security\": [\n        {\n        \"OAuth2\": [\n                \"write\",\n                \"read\"\n            ]\n        }\n    ]\n}\n```\n\n\n## Exploit\n\n\nPossible exploit scenario\n-------------------------\n\n\nAttackers can eavesdrop credentials transported over the network and try to intercept the traffic between the API consumer and your API to retrieve them. If they succeed, they can access all API operations protected with the same security requirement until the credentials are specifically revoked or changed. API keys have long lifetime providing extended opportunity for exploits.\n\n\n\n\n"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file:///examples/pixi.json",
                                    "index": 0
                                },
                                "region": {
                                    "startLine": 1171,
                                    "startColumn": 9,
                                    "endColumn": 13
                                }
                            }
                        }
                    ],
                    "ruleIndex": 0
                },
                {
                    "level": "warning",
                    "ruleId": "v3-operation-securityrequirement-apikey-inheader",
                    "message": {
                        "text": "# Operation accepts API keys transported in a header over network\n===============================================================\n\n\n\n## Description\n\n\nDescription\n-----------\n\n\nThe API operation accepts API keys transported in a header over the network instead of the more secure tokens. The credentials are sent over the network on each API call, over and over again, and are exposed to attack attempts to retrieve them.\n\n\nFor more details, see the [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#operation-object).\n\n\n\n\n## Example\n\n\nExample\n-------\n\n\nThe following is an example of how this type of risk could look in your API definition:\n\n\n\n\n```yaml\ncomponents:\n    securitySchemes:\n        apiKey:\n            in: header\n            name: X-API-Key\n            type: apiKey\npaths:\n    /pets:\n        post:\n            description: Creates a new pet in the store\n            operationId: addPet\n            security:\n            -   apiKey: []\nservers:\n-   description: API server\n    url: https://my.api.server.com/\n\n```\n\n\n```json\n{  \n    \"servers\": [\n        {\n            \"url\": \"https://my.api.server.com/\",\n            \"description\": \"API server\"\n        }\n    ],\n    // ...  \n    \"components\": {\n        \"securitySchemes\": {\n            \"apiKey\": {\n                \"type\": \"apiKey\",\n                \"name\": \"X-API-Key\",\n                \"in\": \"header\"\n            }\n        }\n    },\n    // ...\n    \"paths\": {\n        \"/pets\": {\n            \"post\": {\n                \"description\": \"Creates a new pet in the store\",\n                \"operationId\": \"addPet\",\n                \"security\": [\n                    {\n                        \"apiKey\": []\n                    }\n                ]\n                // ...\n            }\n        }\n    }\n}\n```\n\n\n## Remediation\n\n\nRemediation\n-----------\n\n\nUse a more secure authentication method, like OAuth 2.0. It uses access tokens with limited lifetime and authorizations (the scopes) granted that the resource owner grants from an authorization server.\n\n\nAn API operation can be consumed only if the request includes an access token and the scopes of the token match the scopes that the API operation requires. Even if attackers successfully retrieved access tokens, they can only use the token on a subset of the API operation and for a limited time.\n\n\n\n\n```yaml\ncomponents:\n    securitySchemes:\n        OAuth2:\n            flows:\n                authorizationCode:\n                    authorizationUrl: https://example.com/oauth/authorize\n                    scopes:\n                        read: read objects in your account\n                        write: modify objects in your account\n                    tokenUrl: https://example.com/oauth/token\n            type: oauth2\npaths:\n    /pets:\n        post:\n            description: Creates a new pet in the store\n            operationId: addPet\n            security:\n            -   OAuth2:\n                - write\n                - read\nservers:\n-   description: API server\n    url: https://my.api.server.com/\n\n```\n\n\n```json\n{ \n    \"servers\": [\n        {\n            \"url\": \"https://my.api.server.com/\",\n            \"description\": \"API server\"\n        }\n    ],\n    // ...\n    \"components\": {\n        \"securitySchemes\": {\n            \"OAuth2\": {\n                \"type\": \"oauth2\",\n                \"flows\": {\n                    \"authorizationCode\": {\n                        \"scopes\": {\n                            \"write\": \"modify objects in your account\",\n                            \"read\": \"read objects in your account\"\n                        },\n                        \"authorizationUrl\": \"https://example.com/oauth/authorize\",\n                        \"tokenUrl\": \"https://example.com/oauth/token\" \n                    }\n                }\n            }\n        }\n    },\n    // ...\n    \"paths\": {\n        \"/pets\": {\n            \"post\": {\n                \"description\": \"Creates a new pet in the store\",\n                \"operationId\": \"addPet\",\n                \"security\": [\n                    {\n                        \"OAuth2\": [\n                            \"write\",\n                            \"read\"\n                        ]\n                    }\n                ]\n                // ...\n            }\n        }\n    }\n}\n```\n\n\n## Exploit\n\n\nPossible exploit scenario\n-------------------------\n\n\nAttackers can eavesdrop credentials transported over the network and try to intercept the traffic between the API consumer and your API to retrieve them. If they succeed, they can access all API operations protected with the same security requirement until the credentials are specifically revoked or changed. API keys have long lifetime providing extended opportunity for exploits.\n\n\n\n\n"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "file:///examples/pixi.json",
                                    "index": 0
                                },
                                "region": {
                                    "startLine": 1171,
                                    "startColumn": 9,
                                    "endColumn": 13
                                }
                            }
                        }
                    ],
                    "ruleIndex": 1
                }
            ]
        }
    ]
}
